
# =============================================================================
# References
# ==========
#
# - No corresponding activity
# -
#
# Suppose that a random variable X can only take the values {0, 1, 2, 3, 4}.
# It has a p.m.f.
# x     0   1   2   3   4
# p(x)  0.3 0.1 0.4 0.1 0.1
#
# - Confirm it is a valid p.m.f.
# - Calculate P(X=2)
# - Calculate F(3)
# - Calculate E(X)
# - Calculate V(X)
# - Plot the p.m.f.
#
# =============================================================================

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# =============================================================================
# Declare the DataFrame
# =============================================================================

pmf = pd.DataFrame()
pmf['X'] = [0, 1, 2, 3, 4]
pmf['Pr'] = [0.3, 0.1, 0.4, 0.1, 0.1]

pmf

# =============================================================================
# Confirm valid p.m.f.
# Expect both to return to True.
# =============================================================================

# Sum of the Pr is 1
pmf["Pr"].sum() == 1

# All Pr > 0. Count rows where Pr <= 0
pmf.query('Pr <= 0')["Pr"].count() == 0

# =============================================================================
# Calculate the P(X=2)
# =============================================================================

pmf.query('X == 2')['Pr']

# =============================================================================
# Calculate the F(3)
# =============================================================================

pmf.query('X <= 3')["Pr"].sum()

# =============================================================================
# Calculate E(X).
# Add a column x.Pr, sum column
# =============================================================================

pmf["X.Pr"] = pmf["X"] * pmf["Pr"]
mean = pmf["X.Pr"].sum()
mean

# =============================================================================
# Calculate V(X).
# Add a column of the square deviations, sum column.
# =============================================================================

pmf["Sq Dev"] = (pmf["X"] - mean)**2 * pmf["Pr"]
var = round(pmf["Sq Dev"].sum(), 3)
var

# =============================================================================
# Plot the p.m.f.
# =============================================================================

f, ax = plt.subplots()

sns.barplot(data=pmf,
            x="X",
            y="Pr",  # calaculate Pr(X)
            color="royalblue")

plt.show()
